
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 23 12:55:36 CST 2022
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 23 12:55:36 CST 2022
  */
public class GOParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GOParser() {super();}

  /** Constructor which sets the default scanner. */
  public GOParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GOParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\003\011\000\002\004\016\000\002\004\020" +
    "\000\002\004\022\000\002\005\004\000\002\006\003\000" +
    "\002\006\006\000\002\007\005\000\002\007\003\000\002" +
    "\007\007\000\002\007\011\000\002\007\013\000\002\007" +
    "\015\000\002\010\005\000\002\011\004\000\002\011\006" +
    "\000\002\011\010\000\002\011\012\000\002\011\014\000" +
    "\002\011\016\000\002\011\020\000\002\012\013\000\002" +
    "\012\007\000\002\012\005\000\002\012\013\000\002\012" +
    "\010\000\002\013\006\000\002\013\003\000\002\013\011" +
    "\000\002\013\014\000\002\014\006\000\002\014\003\000" +
    "\002\014\011\000\002\014\014\000\002\015\003\000\002" +
    "\016\005\000\002\016\003\000\002\016\007\000\002\016" +
    "\011\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\005\000\002\020\003\000\002\020\007\000\002" +
    "\020\011\000\002\021\003\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\022\007\000\002\022\011" +
    "\000\002\023\003\000\002\023\003\000\002\024\004\000" +
    "\002\024\003\000\002\024\005\000\002\024\006\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\006\000\002\025\010\000\002\025\012\000\002\026\006" +
    "\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\032\005\001\002\000\004\002\307\001" +
    "\002\000\004\033\006\001\002\000\004\034\007\001\002" +
    "\000\004\047\010\001\002\000\004\035\011\001\002\000" +
    "\006\033\016\052\246\001\002\000\004\035\014\001\002" +
    "\000\004\002\uffff\001\002\000\004\033\016\001\002\000" +
    "\004\002\000\001\002\000\004\022\017\001\002\000\004" +
    "\023\020\001\002\000\004\007\021\001\002\000\014\036" +
    "\027\040\033\042\023\045\030\052\031\001\002\000\004" +
    "\004\230\001\002\000\014\022\055\024\047\025\040\051" +
    "\043\052\053\001\002\000\004\015\222\001\002\000\004" +
    "\010\221\001\002\000\006\010\ufff6\044\ufff6\001\002\000" +
    "\004\052\212\001\002\000\014\022\055\024\047\025\040" +
    "\051\043\052\053\001\002\000\006\015\uffba\030\077\001" +
    "\002\000\004\004\165\001\002\000\004\005\034\001\002" +
    "\000\006\041\035\043\036\001\002\000\004\022\157\001" +
    "\002\000\004\022\037\001\002\000\014\022\055\024\047" +
    "\025\040\051\043\052\053\001\002\000\014\022\uffcc\024" +
    "\uffcc\025\uffcc\051\uffcc\052\uffcc\001\002\000\014\022\055" +
    "\024\047\025\040\051\043\052\053\001\002\000\014\004" +
    "\uffe3\006\uffe3\007\uffe3\020\141\023\uffe3\001\002\000\044" +
    "\004\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\031\uffc0\001\002\000\016\004" +
    "\uffdc\006\uffdc\007\uffdc\020\uffdc\021\uffdc\023\uffdc\001\002" +
    "\000\044\004\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\001\002\000" +
    "\016\004\uffdf\006\uffdf\007\uffdf\020\uffdf\021\130\023\uffdf" +
    "\001\002\000\014\022\uffcd\024\uffcd\025\uffcd\051\uffcd\052" +
    "\uffcd\001\002\000\032\004\uffda\006\uffda\007\uffda\011\115" +
    "\012\117\013\116\014\120\016\114\017\121\020\uffda\021" +
    "\uffda\023\uffda\001\002\000\044\004\uffc4\006\uffc4\007\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\031\uffc4\001\002\000\004\023\113\001\002\000\050\004" +
    "\uffba\006\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\100\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\077\031\uffba\001\002" +
    "\000\044\004\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\070\027\071\031\uffca\001\002\000" +
    "\014\022\055\024\047\025\040\051\043\052\053\001\002" +
    "\000\040\004\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\024\047\025\040\031\uffd0\001\002\000\014\022\055\024" +
    "\047\025\040\051\043\052\053\001\002\000\040\004\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\047\025\040" +
    "\031\uffd1\001\002\000\014\022\055\024\047\025\040\051" +
    "\043\052\053\001\002\000\040\004\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\023\uffcf\024\047\025\040\031\uffcf\001\002" +
    "\000\014\022\055\024\047\025\040\051\043\052\053\001" +
    "\002\000\034\004\uffce\006\uffce\007\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\031\uffce\001\002\000\004\023\066\001\002\000\044" +
    "\004\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\031\uffbf\001\002\000\014\022" +
    "\055\024\047\025\040\051\043\052\053\001\002\000\014" +
    "\022\uffc7\024\uffc7\025\uffc7\051\uffc7\052\uffc7\001\002\000" +
    "\014\022\uffc6\024\uffc6\025\uffc6\051\uffc6\052\uffc6\001\002" +
    "\000\044\004\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\070\027\071\031\uffcb\001\002\000" +
    "\014\022\055\024\047\025\040\051\043\052\053\001\002" +
    "\000\044\004\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\070\027\071\031\uffc9\001\002\000" +
    "\014\022\055\024\047\025\040\051\043\052\053\001\002" +
    "\000\040\004\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\031\uffc8\001\002\000\014\022\055\024" +
    "\047\025\040\051\043\052\053\001\002\000\014\022\055" +
    "\024\047\025\040\051\043\052\053\001\002\000\006\006" +
    "\102\023\103\001\002\000\014\022\055\024\047\025\040" +
    "\051\043\052\053\001\002\000\044\004\uffbe\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\031\uffbe\001\002\000\006\006\105\023\106\001\002" +
    "\000\014\022\055\024\047\025\040\051\043\052\053\001" +
    "\002\000\044\004\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\001\002" +
    "\000\004\023\110\001\002\000\044\004\uffbc\006\uffbc\007" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\031\uffbc\001\002\000\004\031\112\001\002\000\046" +
    "\004\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\001\002\000" +
    "\004\004\uffe5\001\002\000\014\022\uffd5\024\uffd5\025\uffd5" +
    "\051\uffd5\052\uffd5\001\002\000\014\022\uffd7\024\uffd7\025" +
    "\uffd7\051\uffd7\052\uffd7\001\002\000\014\022\uffd6\024\uffd6" +
    "\025\uffd6\051\uffd6\052\uffd6\001\002\000\014\022\uffd3\024" +
    "\uffd3\025\uffd3\051\uffd3\052\uffd3\001\002\000\014\022\uffd2" +
    "\024\uffd2\025\uffd2\051\uffd2\052\uffd2\001\002\000\014\022" +
    "\uffd4\024\uffd4\025\uffd4\051\uffd4\052\uffd4\001\002\000\014" +
    "\022\055\024\047\025\040\051\043\052\053\001\002\000" +
    "\032\004\uffdb\006\uffdb\007\uffdb\011\115\012\117\013\116" +
    "\014\120\016\114\017\121\020\uffdb\021\uffdb\023\uffdb\001" +
    "\002\000\014\022\055\024\047\025\040\051\043\052\053" +
    "\001\002\000\032\004\uffd9\006\uffd9\007\uffd9\011\115\012" +
    "\117\013\116\014\120\016\114\017\121\020\uffd9\021\uffd9" +
    "\023\uffd9\001\002\000\014\022\055\024\047\025\040\051" +
    "\043\052\053\001\002\000\016\004\uffd8\006\uffd8\007\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\001\002\000\004\021\131\001" +
    "\002\000\014\022\055\024\047\025\040\051\043\052\053" +
    "\001\002\000\016\004\uffe0\006\uffe0\007\uffe0\020\uffe0\021" +
    "\133\023\uffe0\001\002\000\004\021\134\001\002\000\014" +
    "\022\055\024\047\025\040\051\043\052\053\001\002\000" +
    "\016\004\uffde\006\uffde\007\uffde\020\uffde\021\136\023\uffde" +
    "\001\002\000\004\021\137\001\002\000\014\022\055\024" +
    "\047\025\040\051\043\052\053\001\002\000\014\004\uffdd" +
    "\006\uffdd\007\uffdd\020\uffdd\023\uffdd\001\002\000\004\020" +
    "\142\001\002\000\014\022\055\024\047\025\040\051\043" +
    "\052\053\001\002\000\014\004\uffe4\006\uffe4\007\uffe4\020" +
    "\144\023\uffe4\001\002\000\004\020\145\001\002\000\014" +
    "\022\055\024\047\025\040\051\043\052\053\001\002\000" +
    "\014\004\uffe2\006\uffe2\007\uffe2\020\147\023\uffe2\001\002" +
    "\000\004\020\150\001\002\000\014\022\055\024\047\025" +
    "\040\051\043\052\053\001\002\000\012\004\uffe1\006\uffe1" +
    "\007\uffe1\023\uffe1\001\002\000\044\004\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\001\002\000\014\022\055\024\047\025\040" +
    "\051\043\052\053\001\002\000\010\022\055\051\043\052" +
    "\053\001\002\000\044\004\uffc3\006\uffc3\007\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3" +
    "\001\002\000\044\004\uffc2\006\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\001" +
    "\002\000\004\050\160\001\002\000\004\006\161\001\002" +
    "\000\004\021\162\001\002\000\004\052\163\001\002\000" +
    "\004\023\164\001\002\000\004\004\uffe6\001\002\000\016" +
    "\010\ufff0\040\033\042\023\044\ufff0\045\030\052\031\001" +
    "\002\000\004\004\167\001\002\000\016\010\uffef\040\033" +
    "\042\023\044\uffef\045\030\052\031\001\002\000\004\004" +
    "\171\001\002\000\016\010\uffee\040\033\042\023\044\uffee" +
    "\045\030\052\031\001\002\000\004\004\173\001\002\000" +
    "\016\010\uffed\040\033\042\023\044\uffed\045\030\052\031" +
    "\001\002\000\004\004\175\001\002\000\016\010\uffec\040" +
    "\033\042\023\044\uffec\045\030\052\031\001\002\000\004" +
    "\004\177\001\002\000\016\010\uffeb\040\033\042\023\044" +
    "\uffeb\045\030\052\031\001\002\000\004\004\201\001\002" +
    "\000\006\010\uffea\044\uffea\001\002\000\004\007\203\001" +
    "\002\000\012\040\033\042\023\045\030\052\031\001\002" +
    "\000\004\010\205\001\002\000\004\046\206\001\002\000" +
    "\004\007\207\001\002\000\012\040\033\042\023\045\030" +
    "\052\031\001\002\000\004\010\211\001\002\000\004\004" +
    "\uffe9\001\002\000\006\030\214\037\215\001\002\000\004" +
    "\004\ufff1\001\002\000\004\051\216\001\002\000\012\004" +
    "\ufff9\006\ufff9\007\ufff9\023\ufff9\001\002\000\004\031\217" +
    "\001\002\000\006\030\214\037\215\001\002\000\012\004" +
    "\ufff8\006\ufff8\007\ufff8\023\ufff8\001\002\000\004\002\ufffe" +
    "\001\002\000\014\022\055\024\047\025\040\051\043\052" +
    "\053\001\002\000\004\004\uffe7\001\002\000\004\007\225" +
    "\001\002\000\012\040\033\042\023\045\030\052\031\001" +
    "\002\000\004\010\227\001\002\000\004\004\uffe8\001\002" +
    "\000\014\036\027\040\033\042\023\045\030\052\031\001" +
    "\002\000\004\004\233\001\002\000\006\010\ufff7\044\ufff7" +
    "\001\002\000\014\036\027\040\033\042\023\045\030\052" +
    "\031\001\002\000\004\004\236\001\002\000\006\010\ufff5" +
    "\044\ufff5\001\002\000\014\036\027\040\033\042\023\045" +
    "\030\052\031\001\002\000\004\004\241\001\002\000\006" +
    "\010\ufff4\044\ufff4\001\002\000\014\036\027\040\033\042" +
    "\023\045\030\052\031\001\002\000\004\004\244\001\002" +
    "\000\006\010\ufff3\044\ufff3\001\002\000\012\040\033\042" +
    "\023\045\030\052\031\001\002\000\006\010\ufff2\044\ufff2" +
    "\001\002\000\004\022\247\001\002\000\004\052\250\001" +
    "\002\000\006\030\214\037\215\001\002\000\006\006\252" +
    "\023\253\001\002\000\004\052\250\001\002\000\006\030" +
    "\214\037\215\001\002\000\004\007\255\001\002\000\014" +
    "\036\027\040\033\042\023\045\030\052\031\001\002\000" +
    "\004\044\257\001\002\000\014\022\055\024\047\025\040" +
    "\051\043\052\053\001\002\000\004\004\261\001\002\000" +
    "\004\010\262\001\002\000\004\035\ufffd\001\002\000\006" +
    "\006\264\023\265\001\002\000\004\052\250\001\002\000" +
    "\006\030\214\037\215\001\002\000\004\007\267\001\002" +
    "\000\014\036\027\040\033\042\023\045\030\052\031\001" +
    "\002\000\004\044\271\001\002\000\014\022\055\024\047" +
    "\025\040\051\043\052\053\001\002\000\004\004\273\001" +
    "\002\000\004\010\274\001\002\000\004\035\ufffc\001\002" +
    "\000\004\023\276\001\002\000\006\030\214\037\215\001" +
    "\002\000\004\007\300\001\002\000\014\036\027\040\033" +
    "\042\023\045\030\052\031\001\002\000\004\044\302\001" +
    "\002\000\014\022\055\024\047\025\040\051\043\052\053" +
    "\001\002\000\004\004\304\001\002\000\004\010\305\001" +
    "\002\000\004\035\ufffb\001\002\000\006\006\ufffa\023\ufffa" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\004\011\001\001\000\002\001\001\000\004\003" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\024\010\021\011\025\012\031\026\023" +
    "\001\001\000\002\001\001\000\026\013\223\014\041\015" +
    "\045\016\043\020\047\021\040\022\055\024\053\025\050" +
    "\026\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\013\201\014\041" +
    "\015\045\016\043\020\047\021\040\022\055\024\053\025" +
    "\050\026\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\013\051\014\041\015\045\016\043" +
    "\020\047\021\040\022\055\024\053\025\050\026\044\001" +
    "\001\000\002\001\001\000\010\021\152\025\151\026\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\066\001\001\000\026" +
    "\013\064\014\041\015\045\016\043\020\047\021\040\022" +
    "\055\024\053\025\050\026\044\001\001\000\004\021\056" +
    "\001\001\000\014\021\040\022\057\024\053\025\050\026" +
    "\044\001\001\000\004\021\060\001\001\000\014\021\040" +
    "\022\061\024\053\025\050\026\044\001\001\000\004\021" +
    "\062\001\001\000\014\021\040\022\063\024\053\025\050" +
    "\026\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\040\024\071\025\050\026\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\072\001\001\000\012\021\040\024\073\025\050\026\044" +
    "\001\001\000\004\023\074\001\001\000\012\021\040\024" +
    "\075\025\050\026\044\001\001\000\002\001\001\000\016" +
    "\020\110\021\040\022\055\024\053\025\050\026\044\001" +
    "\001\000\026\013\100\014\041\015\045\016\043\020\047" +
    "\021\040\022\055\024\053\025\050\026\044\001\001\000" +
    "\002\001\001\000\026\013\103\014\041\015\045\016\043" +
    "\020\047\021\040\022\055\024\053\025\050\026\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\106" +
    "\014\041\015\045\016\043\020\047\021\040\022\055\024" +
    "\053\025\050\026\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\122\021\040\022\055\024\053" +
    "\025\050\026\044\001\001\000\004\017\123\001\001\000" +
    "\016\020\124\021\040\022\055\024\053\025\050\026\044" +
    "\001\001\000\004\017\125\001\001\000\016\020\126\021" +
    "\040\022\055\024\053\025\050\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\131\016\043\020" +
    "\047\021\040\022\055\024\053\025\050\026\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\134\016" +
    "\043\020\047\021\040\022\055\024\053\025\050\026\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\137\016\043\020\047\021\040\022\055\024\053\025\050" +
    "\026\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\142\015\045\016\043\020\047\021\040\022\055" +
    "\024\053\025\050\026\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\145\015\045\016\043\020\047" +
    "\021\040\022\055\024\053\025\050\026\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\150\015\045" +
    "\016\043\020\047\021\040\022\055\024\053\025\050\026" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\153\025\154\026\044\001\001\000\006\025\155\026" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\165" +
    "\026\023\001\001\000\002\001\001\000\006\012\167\026" +
    "\023\001\001\000\002\001\001\000\006\012\171\026\023" +
    "\001\001\000\002\001\001\000\006\012\173\026\023\001" +
    "\001\000\002\001\001\000\006\012\175\026\023\001\001" +
    "\000\002\001\001\000\006\012\177\026\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\203\012\031\026\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\207\012\031" +
    "\026\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\222" +
    "\014\041\015\045\016\043\020\047\021\040\022\055\024" +
    "\053\025\050\026\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\225\012\031\026\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\230\011\231" +
    "\012\031\026\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\233\011\234\012\031\026\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\236\011" +
    "\237\012\031\026\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\241\011\242\012\031\026\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\244" +
    "\012\031\026\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\250\001\001\000\004\006\305\001\001" +
    "\000\002\001\001\000\004\005\262\001\001\000\004\006" +
    "\253\001\001\000\002\001\001\000\014\007\255\010\021" +
    "\011\025\012\031\026\023\001\001\000\002\001\001\000" +
    "\026\013\257\014\041\015\045\016\043\020\047\021\040" +
    "\022\055\024\053\025\050\026\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\274\001\001\000\004\006\265\001\001\000" +
    "\002\001\001\000\014\007\267\010\021\011\025\012\031" +
    "\026\023\001\001\000\002\001\001\000\026\013\271\014" +
    "\041\015\045\016\043\020\047\021\040\022\055\024\053" +
    "\025\050\026\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\276" +
    "\001\001\000\002\001\001\000\014\007\300\010\021\011" +
    "\025\012\031\026\023\001\001\000\002\001\001\000\026" +
    "\013\302\014\041\015\045\016\043\020\047\021\040\022" +
    "\055\024\053\025\050\026\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GOParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GOParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GOParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GOParser$actions {
  private final GOParser parser;

  /** Constructor */
  CUP$GOParser$actions(GOParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GOParser$do_action(
    int                        CUP$GOParser$act_num,
    java_cup.runtime.lr_parser CUP$GOParser$parser,
    java.util.Stack            CUP$GOParser$stack,
    int                        CUP$GOParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GOParser$result;

      /* select the action based on the action number */
      switch (CUP$GOParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable ::= ID 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable ::= ID LBRACK addition RBRACK 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primaryExpr ::= ID LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-7)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primaryExpr ::= ID LPAREN expression COMMA expression RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-5)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primaryExpr ::= ID LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primaryExpr ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryExpr ::= INTEGER 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primaryExpr ::= variable 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= add_operator add_operator add_operator primaryExpr 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= add_operator add_operator primaryExpr 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= primaryExpr 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= add_operator primaryExpr 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // mul_op ::= DIVID 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("mul_op",17, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mul_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("mul_op",17, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // multiplication ::= factor mul_op factor mul_op factor mul_op factor 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multiplication ::= factor mul_op factor mul_op factor 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // multiplication ::= factor 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // multiplication ::= factor mul_op factor 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // add_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("add_operator",15, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // add_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("add_operator",15, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addition ::= multiplication add_operator multiplication add_operator multiplication add_operator multiplication 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addition ::= multiplication add_operator multiplication add_operator multiplication 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addition ::= multiplication 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // addition ::= multiplication add_operator multiplication 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rel_op ::= NQ 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_op ::= EQ 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relation ::= addition rel_op addition rel_op addition rel_op addition 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relation ::= addition rel_op addition rel_op addition 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relation ::= addition 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relation ::= addition rel_op addition 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // negation ::= relation 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("negation",11, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjunction ::= negation REF REF negation REF REF negation REF REF negation 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-9)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjunction ::= negation REF REF negation REF REF negation 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjunction ::= negation 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjunction ::= negation REF REF negation 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= conjunction OR OR conjunction OR OR conjunction OR OR conjunction 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-9)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= conjunction OR OR conjunction OR OR conjunction 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= conjunction 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= conjunction OR OR conjunction 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= FMT PERIOD PRINTLN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-5)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= FMT PERIOD SCANF LPAREN D COMMA REF ID RPAREN 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-8)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= variable ASSIGN expression 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= FOR expression LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= IF expression LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-8)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-13)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementList ::= statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-11)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statementList ::= statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-9)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statementList ::= statement SEMICOLON statement SEMICOLON statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-7)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statementList ::= statement SEMICOLON statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-5)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statementList ::= statement SEMICOLON statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statementList ::= statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varDecl ::= VAR ID type 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-10)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block ::= varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-8)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block ::= varDecl SEMICOLON varDecl SEMICOLON varDecl SEMICOLON statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block ::= varDecl SEMICOLON varDecl SEMICOLON statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block ::= varDecl SEMICOLON statementList 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-2)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= LBRACK INTEGER RBRACK type 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-3)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameterDecl ::= ID type 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("parameterDecl",3, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionDecl ::= FUNC ID LPAREN parameterDecl COMMA parameterDecl COMMA parameterDecl RPAREN type LBRACE block RETURN expression SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("functionDecl",2, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-15)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionDecl ::= FUNC ID LPAREN parameterDecl COMMA parameterDecl RPAREN type LBRACE block RETURN expression SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("functionDecl",2, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-13)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionDecl ::= FUNC ID LPAREN parameterDecl RPAREN type LBRACE block RETURN expression SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("functionDecl",2, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-11)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainDecl ::= FUNC MAIN LPAREN RPAREN LBRACE block RBRACE 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("mainDecl",1, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-6)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= PACKAGE MAIN IMPORT FTM2 mainDecl 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-4)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= PACKAGE MAIN IMPORT FTM2 functionDecl mainDecl 
            {
              Object RESULT =null;

              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-5)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          return CUP$GOParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)).value;
		RESULT = start_val;
              CUP$GOParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GOParser$stack.elementAt(CUP$GOParser$top-1)), ((java_cup.runtime.Symbol)CUP$GOParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GOParser$parser.done_parsing();
          return CUP$GOParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

