
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 11 23:00:15 CDT 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 11 23:00:15 CDT 2022
  */
public class GOParserCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GOParserCode() {super();}

  /** Constructor which sets the default scanner. */
  public GOParserCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GOParserCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\040\002\000\002\002" +
    "\011\000\002\041\002\000\002\003\012\000\002\027\004" +
    "\000\002\027\002\000\002\042\002\000\002\043\002\000" +
    "\002\004\020\000\002\030\003\000\002\030\002\000\002" +
    "\031\003\000\002\031\005\000\002\005\004\000\002\006" +
    "\003\000\002\006\006\000\002\032\003\000\002\032\002" +
    "\000\002\007\004\000\002\033\005\000\002\033\004\000" +
    "\002\010\005\000\002\011\004\000\002\011\005\000\002" +
    "\012\010\000\002\012\007\000\002\012\005\000\002\012" +
    "\013\000\002\012\010\000\002\037\006\000\002\037\002" +
    "\000\002\013\006\000\002\013\003\000\002\014\006\000" +
    "\002\014\003\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\004\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\006\000\002\026\004\000\002\034\006\000" +
    "\002\034\002\000\002\035\003\000\002\035\002\000\002" +
    "\036\005\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\032\005\001\002\000\004\002\213\001" +
    "\002\000\004\033\006\001\002\000\004\034\007\001\002" +
    "\000\004\047\010\001\002\000\004\035\000\001\002\000" +
    "\004\035\ufffb\001\002\000\004\035\013\001\002\000\006" +
    "\033\017\052\016\001\002\000\004\035\ufffc\001\002\000" +
    "\004\002\uffff\001\002\000\004\022\ufffa\001\002\000\004" +
    "\022\020\001\002\000\004\023\021\001\002\000\004\007" +
    "\ufffe\001\002\000\004\007\023\001\002\000\004\036\024" +
    "\001\002\000\004\052\161\001\002\000\004\004\160\001" +
    "\002\000\004\010\157\001\002\000\014\036\024\040\037" +
    "\042\031\045\034\052\035\001\002\000\004\004\156\001" +
    "\002\000\014\022\061\024\053\025\044\051\047\052\057" +
    "\001\002\000\004\015\150\001\002\000\016\010\uffee\040" +
    "\037\042\031\044\uffee\045\034\052\035\001\002\000\014" +
    "\022\061\024\053\025\044\051\047\052\057\001\002\000" +
    "\006\015\uffc4\030\uffc4\001\002\000\004\004\134\001\002" +
    "\000\004\005\040\001\002\000\006\041\041\043\042\001" +
    "\002\000\004\022\126\001\002\000\004\022\043\001\002" +
    "\000\014\022\061\024\053\025\044\051\047\052\057\001" +
    "\002\000\014\022\uffd1\024\uffd1\025\uffd1\051\uffd1\052\uffd1" +
    "\001\002\000\010\022\061\051\047\052\057\001\002\000" +
    "\020\004\uffe0\006\uffe0\007\uffe0\020\uffe0\021\074\023\uffe0" +
    "\031\uffe0\001\002\000\044\004\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\001\002\000\034\004\uffdd\006\uffdd\007\uffdd\011\115" +
    "\012\120\013\117\014\121\016\116\017\122\020\uffdd\021" +
    "\uffdd\023\uffdd\031\uffdd\001\002\000\044\004\uffca\006\uffca" +
    "\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\031\uffca\001\002\000\020\004\uffde\006\uffde\007" +
    "\uffde\020\uffde\021\uffde\023\uffde\031\uffde\001\002\000\014" +
    "\022\uffd2\024\uffd2\025\uffd2\051\uffd2\052\uffd2\001\002\000" +
    "\040\004\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024" +
    "\053\025\044\031\uffdb\001\002\000\044\004\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\031\uffcb\001\002\000\006\020\071\023\112\001" +
    "\002\000\050\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\077\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\001\002\000\044\004\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\001\002\000\014\022\061\024\053\025\044\051\047" +
    "\052\057\001\002\000\044\004\uffd3\006\uffd3\007\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\064\027\065\031" +
    "\uffd3\001\002\000\014\022\061\024\053\025\044\051\047" +
    "\052\057\001\002\000\014\022\uffce\024\uffce\025\uffce\051" +
    "\uffce\052\uffce\001\002\000\014\022\uffcd\024\uffcd\025\uffcd" +
    "\051\uffcd\052\uffcd\001\002\000\044\004\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\031\uffd0\001\002\000\006\020\071\023\070\001\002" +
    "\000\044\004\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\001\002\000" +
    "\004\020\072\001\002\000\014\022\061\024\053\025\044" +
    "\051\047\052\057\001\002\000\020\004\uffe1\006\uffe1\007" +
    "\uffe1\020\uffe1\021\074\023\uffe1\031\uffe1\001\002\000\004" +
    "\021\075\001\002\000\014\022\061\024\053\025\044\051" +
    "\047\052\057\001\002\000\020\004\uffdf\006\uffdf\007\uffdf" +
    "\020\uffdf\021\uffdf\023\uffdf\031\uffdf\001\002\000\016\022" +
    "\061\023\uffc2\024\053\025\044\051\047\052\057\001\002" +
    "\000\050\004\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\101\031" +
    "\uffc6\001\002\000\014\022\061\024\053\025\044\051\047" +
    "\052\057\001\002\000\006\020\071\031\103\001\002\000" +
    "\050\004\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\001\002\000\006\006\110\023\uffc3\001\002\000\010\006" +
    "\uffc0\020\071\023\uffc0\001\002\000\004\023\107\001\002" +
    "\000\044\004\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\001\002\000" +
    "\014\022\061\024\053\025\044\051\047\052\057\001\002" +
    "\000\010\006\uffc1\020\071\023\uffc1\001\002\000\004\004" +
    "\uffe4\001\002\000\014\022\061\024\053\025\044\051\047" +
    "\052\057\001\002\000\044\004\uffd4\006\uffd4\007\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\064\027\065\031" +
    "\uffd4\001\002\000\014\022\uffda\024\uffda\025\uffda\051\uffda" +
    "\052\uffda\001\002\000\014\022\uffd8\024\uffd8\025\uffd8\051" +
    "\uffd8\052\uffd8\001\002\000\014\022\uffd9\024\uffd9\025\uffd9" +
    "\051\uffd9\052\uffd9\001\002\000\014\022\uffd6\024\uffd6\025" +
    "\uffd6\051\uffd6\052\uffd6\001\002\000\014\022\uffd5\024\uffd5" +
    "\025\uffd5\051\uffd5\052\uffd5\001\002\000\014\022\uffd7\024" +
    "\uffd7\025\uffd7\051\uffd7\052\uffd7\001\002\000\014\022\061" +
    "\024\053\025\044\051\047\052\057\001\002\000\040\004" +
    "\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\053\025" +
    "\044\031\uffdc\001\002\000\044\004\uffcc\006\uffcc\007\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\031\uffcc\001\002\000\004\050\127\001\002\000\004\006" +
    "\130\001\002\000\004\021\131\001\002\000\004\052\132" +
    "\001\002\000\004\023\133\001\002\000\004\004\uffe5\001" +
    "\002\000\016\010\uffea\040\uffea\042\uffea\044\uffea\045\uffea" +
    "\052\uffea\001\002\000\006\007\136\020\071\001\002\000" +
    "\012\040\037\042\031\045\034\052\035\001\002\000\014" +
    "\010\140\040\037\042\031\045\034\052\035\001\002\000" +
    "\006\004\uffe2\046\144\001\002\000\004\004\142\001\002" +
    "\000\016\010\uffe9\040\uffe9\042\uffe9\044\uffe9\045\uffe9\052" +
    "\uffe9\001\002\000\004\004\uffe8\001\002\000\004\007\145" +
    "\001\002\000\012\040\037\042\031\045\034\052\035\001" +
    "\002\000\014\010\147\040\037\042\031\045\034\052\035" +
    "\001\002\000\004\004\uffe3\001\002\000\014\022\061\024" +
    "\053\025\044\051\047\052\057\001\002\000\006\004\uffe6" +
    "\020\071\001\002\000\006\007\153\020\071\001\002\000" +
    "\012\040\037\042\031\045\034\052\035\001\002\000\014" +
    "\010\155\040\037\042\031\045\034\052\035\001\002\000" +
    "\004\004\uffe7\001\002\000\014\036\uffed\040\uffed\042\uffed" +
    "\045\uffed\052\uffed\001\002\000\004\002\ufffd\001\002\000" +
    "\014\036\uffec\040\uffec\042\uffec\045\uffec\052\uffec\001\002" +
    "\000\006\030\163\037\164\001\002\000\004\004\uffeb\001" +
    "\002\000\004\051\165\001\002\000\012\004\ufff2\006\ufff2" +
    "\007\ufff2\023\ufff2\001\002\000\004\031\166\001\002\000" +
    "\006\030\163\037\164\001\002\000\012\004\ufff1\006\ufff1" +
    "\007\ufff1\023\ufff1\001\002\000\004\022\171\001\002\000" +
    "\006\023\ufff6\052\172\001\002\000\006\030\163\037\164" +
    "\001\002\000\006\006\ufff5\023\ufff5\001\002\000\004\023" +
    "\200\001\002\000\006\006\176\023\ufff7\001\002\000\004" +
    "\052\172\001\002\000\006\006\ufff4\023\ufff4\001\002\000" +
    "\006\030\163\037\164\001\002\000\004\007\ufff9\001\002" +
    "\000\004\007\203\001\002\000\006\036\024\044\uffef\001" +
    "\002\000\004\044\206\001\002\000\004\044\ufff0\001\002" +
    "\000\014\022\061\024\053\025\044\051\047\052\057\001" +
    "\002\000\006\004\210\020\071\001\002\000\004\010\211" +
    "\001\002\000\004\035\ufff8\001\002\000\006\006\ufff3\023" +
    "\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\010\001\001\000\004\027\011\001\001\000\006\003" +
    "\014\004\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\021\001\001\000\002" +
    "\001\001\000\010\007\025\010\024\033\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\027\011\032\012\035\026\031\001\001\000\002\001" +
    "\001\000\026\013\151\014\045\015\051\016\047\020\053" +
    "\021\044\022\061\024\057\025\054\026\050\001\001\000" +
    "\002\001\001\000\006\012\140\026\031\001\001\000\026" +
    "\013\134\014\045\015\051\016\047\020\053\021\044\022" +
    "\061\024\057\025\054\026\050\001\001\000\004\034\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\055" +
    "\014\045\015\051\016\047\020\053\021\044\022\061\024" +
    "\057\025\054\026\050\001\001\000\002\001\001\000\006" +
    "\025\124\026\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\077\001\001" +
    "\000\002\001\001\000\026\013\066\014\045\015\051\016" +
    "\047\020\053\021\044\022\061\024\057\025\054\026\050" +
    "\001\001\000\004\023\062\001\001\000\012\021\044\024" +
    "\065\025\054\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\072\015\051\016\047" +
    "\020\053\021\044\022\061\024\057\025\054\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\075" +
    "\016\047\020\053\021\044\022\061\024\057\025\054\026" +
    "\050\001\001\000\002\001\001\000\032\013\104\014\045" +
    "\015\051\016\047\020\053\021\044\022\061\024\057\025" +
    "\054\026\050\035\105\036\103\001\001\000\002\001\001" +
    "\000\026\013\101\014\045\015\051\016\047\020\053\021" +
    "\044\022\061\024\057\025\054\026\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\110" +
    "\014\045\015\051\016\047\020\053\021\044\022\061\024" +
    "\057\025\054\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\044\022\113\024\057\025\054\026" +
    "\050\001\001\000\004\023\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\123\021\044" +
    "\022\061\024\057\025\054\026\050\001\001\000\004\021" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\136\012\035\026\031\001\001\000\006\012" +
    "\140\026\031\001\001\000\004\037\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\145\012\035\026\031\001\001\000\006" +
    "\012\140\026\031\001\001\000\002\001\001\000\026\013" +
    "\150\014\045\015\051\016\047\020\053\021\044\022\061" +
    "\024\057\025\054\026\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\153\012\035\026\031\001\001" +
    "\000\006\012\140\026\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\172\030" +
    "\173\031\174\001\001\000\004\006\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\176\001\001\000\002\001\001\000\004\006\200\001\001" +
    "\000\004\043\201\001\001\000\002\001\001\000\012\007" +
    "\204\010\024\032\203\033\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\206\014\045\015\051\016" +
    "\047\020\053\021\044\022\061\024\057\025\054\026\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GOParserCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GOParserCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GOParserCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GOParserCode$actions {

 SymbolTable currentEnv, env; 
  private final GOParserCode parser;

  /** Constructor */
  CUP$GOParserCode$actions(GOParserCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GOParserCode$do_action(
    int                        CUP$GOParserCode$act_num,
    java_cup.runtime.lr_parser CUP$GOParserCode$parser,
    java.util.Stack            CUP$GOParserCode$stack,
    int                        CUP$GOParserCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GOParserCode$result;

      /* select the action based on the action number */
      switch (CUP$GOParserCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressionList ::= expression 
            {
              ExpressionCode RESULT =null;
		int ecodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int ecoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode ecode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = ecode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expressionList",28, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressionList ::= expressionList COMMA expression 
            {
              ExpressionCode RESULT =null;
		int ecodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int ecoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode ecode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = ecode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expressionList",28, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressionListOption ::= 
            {
              ExpressionCode RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expressionListOption",27, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressionListOption ::= expressionList 
            {
              ExpressionCode RESULT =null;
		int ecodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int ecoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode ecode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = ecode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expressionListOption",27, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // subscriptList ::= 
            {
              ExpressionCode RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("subscriptList",26, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // subscriptList ::= subscriptList LBRACK expression RBRACK 
            {
              ExpressionCode RESULT =null;
		int scodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)).left;
		int scoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)).right;
		ExpressionCode scode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)).value;
		 RESULT = scode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("subscriptList",26, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable ::= ID subscriptList 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		 RESULT = id; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("variable",20, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primaryExpr ::= ID LPAREN expressionListOption RPAREN 
            {
              ExpressionCode RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primaryExpr ::= LPAREN expression RPAREN 
            {
              ExpressionCode RESULT =null;
		int ecodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int ecoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		ExpressionCode ecode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		 RESULT = ecode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primaryExpr ::= INTEGER 
            {
              ExpressionCode RESULT =null;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		String intval = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = new ExpressionCode ("", intval); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primaryExpr ::= variable 
            {
              ExpressionCode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = new ExpressionCode ("", id); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("primaryExpr",19, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= primaryExpr 
            {
              ExpressionCode RESULT =null;
		int pcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int pcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode pcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = pcode ; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= add_operator primaryExpr 
            {
              ExpressionCode RESULT =null;
		int pcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int pcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode pcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = pcode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mul_op ::= DIVID 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("mul_op",17, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // mul_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("mul_op",17, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // multiplication ::= factor 
            {
              ExpressionCode RESULT =null;
		int fcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int fcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode fcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = fcode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // multiplication ::= multiplication mul_op factor 
            {
              ExpressionCode RESULT =null;
		int fcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int fcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode fcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = fcode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("multiplication",16, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // add_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("add_operator",15, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // add_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("add_operator",15, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // addition ::= multiplication 
            {
              ExpressionCode RESULT =null;
		int mcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int mcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode mcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = mcode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // addition ::= addition add_operator multiplication 
            {
              ExpressionCode RESULT =null;
		int mcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int mcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode mcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = mcode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("addition",14, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rel_op ::= NQ 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rel_op ::= EQ 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("rel_op",13, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relation ::= addition 
            {
              ExpressionCode RESULT =null;
		int acodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int acoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode acode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
        String termTemp = Code . newTemp ();
//        env . enterVar (termTemp, null);
        RESULT = new ExpressionCode (acode . code ()
          + "  " + termTemp + " = " + acode . place () +   ";\n", termTemp);
      
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relation ::= relation rel_op addition 
            {
              ExpressionCode RESULT =null;
		int rcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int rcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		ExpressionCode rcode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int acodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int acoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode acode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
        String termTemp = Code . newTemp ();
        env . enterVar (termTemp,null);
        RESULT = new ExpressionCode (rcode . code () + acode . code ()
          + "  " + termTemp + " = " + rcode . place () +  " " 
                                    + acode . place () + ";\n", termTemp);
      
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // negation ::= relation 
            {
              ExpressionCode RESULT =null;
		int relCodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int relCoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode relCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = relCode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("negation",11, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // conjunction ::= negation 
            {
              ExpressionCode RESULT =null;
		int negCodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int negCoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode negCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
        String termTemp = Code . newTemp ();
  //      env . enterVar (termTemp,null);
        RESULT = new ExpressionCode (negCode . code ()
          + "  " + termTemp + " = " + negCode . place () + " "  + ";\n", termTemp);
      
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // conjunction ::= conjunction REF REF negation 
            {
              ExpressionCode RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("conjunction",10, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= conjunction 
            {
              ExpressionCode RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode con = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
        String exprTemp = Code . newTemp ();
//        env . enterVar (exprTemp,null);
        RESULT = new ExpressionCode (con . code ()
          + "  " + exprTemp + " = "  + con . place () + ";\n", exprTemp);
      
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression OR OR conjunction 
            {
              ExpressionCode RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elseOption ::= 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("elseOption",29, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elseOption ::= ELSE LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("elseOption",29, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= FMT PERIOD PRINTLN LPAREN expression RPAREN 
            {
              String RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-5)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= FMT PERIOD SCANF LPAREN D COMMA REF ID RPAREN 
            {
              String RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-8)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= variable ASSIGN expression 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		ExpressionCode exp = (ExpressionCode)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = exp.code() + " " + id + " = " + exp.place() + ";\n"; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= FOR expression LBRACE statementList RBRACE 
            {
              String RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-4)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= IF expression LBRACE statementList RBRACE elseOption 
            {
              String RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-5)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementList ::= statementList statement SEMICOLON 
            {
              String RESULT =null;
		int listcodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int listcoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		String listcode = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		 RESULT = listcode + code; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= statement SEMICOLON 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		 RESULT = code; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("statementList",7, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varDecl ::= VAR ID type 
            {
              Object RESULT =null;
		int varIdleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int varIdright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String varId = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 env . enterVar (varId, varType); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varDeclList ::= varDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("varDeclList",25, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varDeclList ::= varDeclList varDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("varDeclList",25, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= varDeclList statementList 
            {
              String RESULT =null;
		int scodeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int scoderight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		String scode = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		RESULT = scode; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // blockOption ::= 
            {
              SymbolTable RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("blockOption",24, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // blockOption ::= block 
            {
              SymbolTable RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("blockOption",24, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= LBRACK INTEGER RBRACK type 
            {
              Type RESULT =null;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		String dimension = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int baseTypeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int baseTyperight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Type baseType = (Type)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = new ArrayType (Integer . parseInt (dimension), baseType); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType (); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameterDecl ::= ID type 
            {
              Declarator RESULT =null;
		int varIdleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int varIdright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String varId = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = new Declarator (varId, varType); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("parameterDecl",3, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameterDeclList ::= parameterDeclList COMMA parameterDecl 
            {
              LinkedList<Type> RESULT =null;
		int paramTypesleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int paramTypesright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		LinkedList<Type> paramTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
      paramTypes . add (decl . type ());
      RESULT = paramTypes;
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("parameterDeclList",23, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameterDeclList ::= parameterDecl 
            {
              LinkedList<Type> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
      RESULT = new LinkedList<Type> ();
      RESULT . add (decl . type ());
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("parameterDeclList",23, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameterDeclListOption ::= 
            {
              LinkedList<Type> RESULT =null;
		 RESULT = new LinkedList<Type> (); 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("parameterDeclListOption",22, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameterDeclListOption ::= parameterDeclList 
            {
              LinkedList<Type> RESULT =null;
		int paramTypesleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int paramTypesright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		LinkedList<Type> paramTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = paramTypes; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("parameterDeclListOption",22, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDecl ::= FUNC ID NT$2 LPAREN parameterDeclListOption RPAREN type NT$3 LBRACE blockOption RETURN expression SEMICOLON RBRACE 
            {
              SymbolTable RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (SymbolTable) ((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-6)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-12)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-12)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-12)).value;
		int paramTypesleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-9)).left;
		int paramTypesright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-9)).right;
		LinkedList<Type> paramTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-9)).value;
		int funcTypeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-7)).left;
		int funcTyperight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-7)).right;
		Type funcType = (Type)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-7)).value;
		
      currentEnv . enterFuncCode (funcId, ""); /* add code to function entry */
//	RESULT = new Code (env, code);
      env = env . parent (); /* restore env */
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("functionDecl",2, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-13)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              SymbolTable RESULT =(SymbolTable) ((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-4)).value;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-5)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-5)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-5)).value;
		int paramTypesleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).left;
		int paramTypesright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).right;
		LinkedList<Type> paramTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int funcTypeleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int funcTyperight = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Type funcType = (Type)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;

      /* to allow recursive calls */
      currentEnv . enterFunc (funcId, funcType, paramTypes, env);
	Code . initLabel ();
	Code . initTemp ();
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              SymbolTable RESULT =null;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;

      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionDeclList ::= 
            {
              SymbolTable RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("functionDeclList",21, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionDeclList ::= functionDeclList functionDecl 
            {
              SymbolTable RESULT =null;

              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("functionDeclList",21, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainDecl ::= FUNC MAIN LPAREN RPAREN NT$1 LBRACE block RBRACE 
            {
              Code RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Code) ((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-3)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		
      currentEnv . enterFuncCode ("main", ""); /* add code to function entry */
	 RESULT = new Code (env, bo);
      env = env . parent (); /* restore env */
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("mainDecl",1, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-7)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Code RESULT =null;

      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
        Code . initLabel ();
        Code . initTemp ();

      currentEnv . enterFunc ("main", null, null, env);
    
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= PACKAGE MAIN IMPORT FTM2 NT$0 functionDeclList mainDecl 
            {
              Code RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Code) ((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()).right;
		Code ma = (Code)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.peek()).value;
		 RESULT = ma; 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-6)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Code RESULT =null;
 env = new SymbolTable (null); /* start new scope */ 
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          return CUP$GOParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).right;
		Code start_val = (Code)((java_cup.runtime.Symbol) CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)).value;
		RESULT = start_val;
              CUP$GOParserCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.elementAt(CUP$GOParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$GOParserCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GOParserCode$parser.done_parsing();
          return CUP$GOParserCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

